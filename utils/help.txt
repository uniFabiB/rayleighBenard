https://itwiki.math.uni-hamburg.de/doku.php/de:user:server

ssh outside uni
	ssh -K bxxXXXX@login1.math.uni-hamburg.de
	ssh bxxXXXX@compu3.math.uni-hamburg.de
	tmux
	source firedrake
	mpiexec -n numberCores python3 script.py
	

ssh command
	ssh -K bxxXXXX@compu4.math.uni-hamburg.de
		24 cores
	ssh -K bxxXXXX@compu5.math.uni-hamburg.de
		64 cores
		htop installed

mpi command
	 mpiexec -n anzahlCoresOrThreads python3 script.py 
		 8 cores seems the best for almost everything
		 	tested on core test script in backup 2022 09 07
		 		compu
				 	-> nx*ny =   64^2 ->	 4 cores	-> time per step ~~ 0.5 sec 
				 	-> nx*ny =  128^2 ->	 8 cores	-> time per step ~~   2 sec
				 	-> nx*ny =  256^2 ->	 8 cores	-> time per step ~~  10 sec
					-> nx*ny =  512^2 ->	16 cores	-> time per step ~~  45 sec (8 almost the same)
					-> nx*ny =  512^2 ->	32 cores	-> time per step ~~  45 sec (16 almost the same)
						
				laptop
				 	-> nx*ny =   64^2 -> 4 cores	-> time per step ~~ 0.5 sec 
				 	-> nx*ny =  128^2 -> 4 cores	-> time per step ~~   3 sec
				 	-> nx*ny =  256^2 -> 8 cores	-> time per step ~~  20 sec
		 	
tmux
	start
		ssh (connect to server)
		tmux
			auf server (nach ssh, nicht in lokaler console (https://superuser.com/a/490653))
		source firedrake
		mpiexec -n numberCores python3 script.py
		
	detach console
		ctrl + b
			d
		exit
		exit
		
	attach again
		ssh (connect to server)
		tmux attach

pictures
	convert transparent to color
		for i in *.png ; do convert "$i" -background "#eeeeee" -flatten "../out/$i" ; done
	crop to 1920 1080 (and i guess offset) 0 0
		for i in *.png ; do convert "$i" -crop 1920x1080+0+0 "../out/$i" ; done
	combine pictures
		append horizontal
			cd 10_2
			for i in * ; do convert +append ${i} ../104/${i} ../top/$i ; done
		append vertically
			cd top
			for i in * ; do convert -append ${i} ../bot/${i} ../ges/$i ; done
			

video
	pics.0000.png	pics.0001.png	pics.0002.png	...
	
	ffmpeg -framerate 10 -i pics/pics.%04d.png -pix_fmt yuv420p out.mp4
		-framerate 10
			input and output framerate 10 fps
		-pix_fmt yuv420p
			for compatibility with old players
			
	ffmpeg -framerate 5 -i pics/pics.%04d.png -r 30 -pix_fmt yuv420p out.mp4
		https://trac.ffmpeg.org/wiki/Slideshow
		-framerate 5
			5 images per second (input)
		-r 30
			output 30 fps (output)
		-pix_fmt yuv420p
			for compatibility with old players
		
		
